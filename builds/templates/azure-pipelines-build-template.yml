parameters:
  name: ''
  isReleaseBranch: false

jobs:
  - job: ${{ parameters.name }}
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      buildConfiguration: 'Release'
      sourceDirectory: '$(Build.SourcesDirectory)/source'
      testResultsDirectory: '$(Build.SourcesDirectory)/test-results'
    
    steps:

    # calculate build number
    - powershell: |
        Write-Host "Calculate versioning ( $(version) $(isPR)) )"
        $hasMatches = "$(version)" -match '(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)\.(?<build>\d+)'
        if (!$hasMatches) {
            throw "$(version) not in correct format. Needs to be 'major.minor.patch.build'"
        }

        $version = "$($matches.major).$($matches.minor).$($matches.patch)-$($matches.build)"
        if ("$(isPR)" -eq "True") {
          $version = "$($matches.major).$($matches.minor).$($matches.patch)-pr.$($matches.build)"
        } elseif ( "${{parameters.isReleaseBranch}}" -ne "True" ) {
          $version = "$($matches.major).$($matches.minor).$($matches.patch)-dev.$($matches.build)"
        }
        Write-Host Version Number: $version

        Write-Host "Updating source version to $version..."
        $propsFile = "$(sourceDirectory)/Directory.Build.props"
        & "$(Build.SourcesDirectory)/scripts/update-build-number.ps1" $version $propsFile

        Write-Host "##vso[task.setvariable variable=buildNumber;isOutput=true]$version"
        # this will show the calcualted version number in the pipeline UI.
        Write-Host "##vso[build.updatebuildnumber]$version"
      name: CalculateBuildNumber
      displayName: 'calculate build number'
    
    - task: UseDotNet@2
      displayName: 'use .NET 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/*.csproj'
        feedsToUse: config
        nugetConfigPath: $(sourceDirectory)/NuGet.config
    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '-c $(buildConfiguration) --no-restore'
        workingDirectory: $(sourceDirectory)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '**/*.Tests.csproj'
        nobuild: true
        # publishTestResults: false -- when true, test and coverage files are stored in Agent.TempDirectory.
        #                              alternative, put this to false and set the results file in arguments, but you need to publish the test results manually. 
        arguments: '-c $(buildConfiguration) --no-restore --collect:"XPlat Code Coverage" /p:Exclude="[*Tests]*"'
        workingDirectory: $(sourceDirectory)

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      condition: "and(succeeded(), ne(variables['isPR'], 'True'))"
      inputs:
        command: publish
        projects: '**/ApiProject.csproj'
        nobuild: true
        arguments: '-c $(buildConfiguration) --no-restore -o $(Build.SourcesDirectory)/published'
        modifyOutputPath: false
        zipAfterPublish: true
        workingDirectory: $(sourceDirectory)

    - powershell: |
        Write-Host 'rename package to include version $(CalculateBuildNumber.buildNumber)'
        Get-ChildItem -Filter "*.zip" -Recurse | Rename-Item -NewName {$_.name -replace '.zip','-$(CalculateBuildNumber.buildNumber).zip'}
      displayName: 'rename zip package'
      condition: "and(succeeded(), ne(variables['isPR'],'True'))"
      workingDirectory: $(Build.SourcesDirectory)/published

    # these can be removed if we publishing directly in the Build.ArtifactsStagingDirectory
    # I would keep it if you publish multiple projects (e.g. back- and front-end)
    - task: CopyFiles@2
      displayName: 'copy .zip file to ArtifactStagingDirectory'
      condition: "and(succeeded(), ne(variables['isPR'], 'True'))"
      inputs:
        contents: |
          $(Build.SourcesDirectory)/published/**/*.zip
        targetFolder: '$(Build.ArtifactStagingDirectory)/application'
        flattenFolders: true
      
    - publish: $(Build.ArtifactStagingDirectory)/application
      displayName: 'publish artifact: application'
      condition: "and(succeeded(), ne(variables['isPR'],'True'))"
      artifact: 'application'

# Generate and publish all code coverages
    - task: reportgenerator@5
      displayName: 'generate code coverage report'
      inputs:
        reports: $(Agent.TempDirectory)/**/*cobertura*.xml
        targetdir: $(Build.ArtifactStagingDirectory)/test-results/
        reporttypes: "HtmlInline_AzurePipelines;Cobertura;Badges"

    - task: PublishCodeCoverageResults@2
      displayName: "publish code coverage results"
      inputs:
        codeCoverageTool: cobertura
        summaryFileLocation: $(Build.ArtifactStagingDirectory)/test-results/Cobertura.xml
        # To make the task not regenerate the report an environment variable was added to the pipeline in Azure DevOps; "disable.coverage.autogenerate: 'true'"
        # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention